{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForms.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","React","createElement","className","role","type","msg","Navbar","href","title","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","heading","value","onChange","event","console","log","target","rows","onClick","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","trim","replace","App","setAlert","about","message","setTimeout","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.f1344941.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        props.alert && <div className=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\r\n            <strong>{props.alert.type}</strong>: {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n            <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n            {/* <Link className=\"navbar-brand\" to=\"/home\">{props.title}</Link> */}\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item \">\r\n                        <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\"></span></a>\r\n                        {/* <Link className=\"nav-link\" to=\"/home\">Home <span className=\"sr-only\"></span></Link> */}\r\n                    </li>\r\n                    {/* <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n                    </li> */}\r\n                </ul>\r\n                \r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string.isRequired\r\n}\r\n\r\n// Navbar.defaultProps =  {\r\n//     title: 'Set title here',\r\n//     about : 'set about here'\r\n// }","import React, {useState} from \"react\"\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=> {\r\n        // console.log(\"Uppercase was clicked\"+ text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted into Uppercase\", \"Success\")\r\n    }\r\n\r\n    const handleLoClick = ()=> {\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted into LowerCase\", \"Success\")\r\n\r\n    }\r\n\r\n    const handleCopy = ()=> {\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text has been Copied\", \"Successfully\")\r\n    }\r\n\r\n    const handleExtraSpaces =()=> {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra Space has been Removed\", \"Successfully\")\r\n    }\r\n\r\n    const handleClearClick = ()=> {\r\n        let newText = \"\";\r\n        setText(newText)\r\n        props.showAlert(\"Text Cleared\", \"Success\")\r\n    }\r\n\r\n    const handleOnChange =(event)=>{\r\n        console.log(\"On change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\nconst [text, setText] = useState(\"\");\r\n// text = \"new text\";  // Wrong way to change state\r\n// setText(\"new text\"); //Correct way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\"> \r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" id=\"myBox\" value={text} onChange={handleOnChange} rows=\"8\"></textarea>\r\n            </div>\r\n            <div className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</div>\r\n            <div className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</div>\r\n            <div className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear Text</div>\r\n            <div className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</div>\r\n            <div className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</div>\r\n        </div>\r\n        <div className=\"container my-3\">\r\n            <h1>Your text Summary</h1>\r\n            {/* <p>{text.split(\" \").length} Words and {text.length} characters</p> */}\r\n            {/* <p>{text.trim() === '' ? 0 : text.match(/\\S+/g).length} words and {text.replace(/\\s+/g, '').length} characters</p> */}\r\n            <p>{text.length>0 ? text.trim().split(\" \").length : 0}  words and {text.replace(/\\s+/g, '').length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text: \"Enter something in the above textbox to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}","import './App.css';\nimport Alert from './components/Alert';\nimport React, { useState } from 'react';\nimport Navbar from './components/Navbar';\n// import About from './components/About';\nimport TextForm from './components/TextForms';\n// import {\n//   BrowserRouter as Router,\n//   Route,\n//   Routes,\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 3000);\n  }\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title=\"TechieBears Pvt Ltd\" about=\"About Us\" />\n        {/* <Navbar /> */}\n        {/* <Navbar title='TechieBears Pvt Ltd  ' /> */}\n        <Alert alert={alert} />\n        {/* <Routes>\n          <Route exact path=\"/about\" element={<About />} /> */}\n          {/* <Route path='/home' element={<TextForm showAlert={showAlert} heading=\"Enter text here \" />} /> */}\n          <TextForm showAlert={showAlert} heading=\"Enter text here \" />\n        {/* </Routes> */}\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    \n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}